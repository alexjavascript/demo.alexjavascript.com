import { Clone, OrbitControls, Text, useAnimations, useGLTF } from '@react-three/drei'
import { BoxGeometryProps, Canvas, MeshBasicMaterialProps, MeshProps, useLoader } from '@react-three/fiber'
import { Leva, useControls } from 'leva'
import { Perf } from 'r3f-perf'
import React, { Suspense, useEffect } from 'react'
import { createRoot } from "react-dom/client"
import * as THREE from 'three'


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
    Cube001: THREE.Mesh
    Plane: THREE.Mesh
    Cube002: THREE.Mesh
  }
  materials: {
    banMaterial: THREE.MeshStandardMaterial
    meatMaterial: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/hamburger/hamburger-compressed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials.banMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001.geometry}
        material={materials.meatMaterial}
        position={[0, 1.53, 0]}
        scale={[0.973, 0.937, 0.973]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane.geometry}
        material={materials['Material.001']}
        position={[0, 3.291, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={materials.banMaterial}
        position={[0, 5.623, 0]}
        rotation={[0, 0, Math.PI]}
      />
    </group>
  )
}

useGLTF.preload('/hamburger-compressed.glb')


useGLTF.preload('/models/FlightHelmet/glTF/FlightHelmet.gltf')
useGLTF.preload('/models/hamburger/hamburger.glb')
useGLTF.preload('/models/Fox/glTF/Fox.gltf')

const COLORS = [
  'red',
  'blue',
  'orange',
  'green',
  'purple'
]

document.body.insertAdjacentHTML('beforeend', `
  <style>
    body {
      margin: 0;
      background: ivory;
    }
  </style>

  <div id="app"></div>
`)


const Preloader = (props: MeshProps) => {
  const color = COLORS[Math.floor(Math.random() * COLORS.length)] 
  return (
    <mesh {...props}>
      <boxGeometry />
      <meshBasicMaterial color={color} wireframe/>
    </mesh>
  )
}

const FlightHelmetModel = () => {
  const model = useGLTF('/models/FlightHelmet/glTF/FlightHelmet.gltf')

  return <Clone object={model.scene} />
}

const BurgersModel = () => {
  const model = useGLTF('/models/hamburger/hamburger.glb')

  console.log(model)

  return <>
    <Clone object={model.scene} scale={0.1} position={[-1, 0, -1]} />
    <Clone object={model.scene} scale={0.1} position={[0, 0, 0]} />
    <Clone object={model.scene} scale={0.1} position={[1, 0, -1]} />  
    <Clone object={model.scene} scale={0.1} position={[-1, 0, 1]} />  
    <Clone object={model.scene} scale={0.1} position={[1, 0, 1]} />  
  </> 
}

const FoxModel = () => {
  const model = useGLTF('/models/Fox/glTF/Fox.gltf')
  
  const animations = useAnimations(model.animations, model.scene)
  
  const { animation } = useControls('Fox Animation', {
    animation: {
      options: animations.names
    }
  })
  
  useEffect(() => {
    const action = animations
      .actions[animation]!
      .reset()
      .fadeIn(0.5)
      .play()

    return () => {
      action.fadeOut(0.5)
    }
  }, [animation])

  return <primitive object={model.scene} scale={0.01} />
}

const Scene = () => {
  const modelControls = useControls('Models', {
    model: {
      value: 'Fox',
      options: [
        'FlightHelmet',
        'Burger',
        'Fox',
        'GLTF_TO_COMPONENT'
      ],
    }
  })

  return (
    <group>
      <mesh rotation-x={Math.PI / -2} position={[0, 0, 0]}>
        <planeGeometry args={ [3, 3] } />
        <meshStandardMaterial color={ 'yellowgreen' } side={THREE.DoubleSide}/>
      </mesh>

      <ambientLight intensity={3} />
      <pointLight position={[0, 2, 0]} intensity={3} castShadow shadow-normalBias={0.1} />

      {modelControls.model === "FlightHelmet" && (
        <Suspense fallback={<Preloader scale={[0.4, 1.5, 0.4]} />}>
          <FlightHelmetModel />
        </Suspense>
      )}

      {modelControls.model === "Burger" && (
        <Suspense fallback={<Preloader scale={[1, 0.5, 1]} />}>
          <BurgersModel />
          <BurgersModel />
          <BurgersModel />
        </Suspense>
      )}

      {modelControls.model === "Fox" && (
        <Suspense fallback={<Preloader scale={[0.3, 1.5, 1]} />}>
          <FoxModel />
        </Suspense>
      )}

      {modelControls.model === "GLTF_TO_COMPONENT" && (
        <Suspense fallback={<Preloader scale={[1, 1, 1]} />}>
          <Model scale={0.1} />
        </Suspense>
      )}
    </group>
  )
}

const Performance = () => {
  const { enabled, position } = useControls('Performance Monitor', {
    enabled: {
      value: true,
      label: 'Enabled'
    },
    position: {
      value: 'bottom-left',
      options: [
        'bottom-left',
        'bottom-right',
        'top-left',
        'top-right'
      ],
      label: 'Position'
    }
  })

  return enabled ? <Perf position={position} /> : null
}

const App = () => {
  return (
    <>
      <Leva />

      <Canvas 
        style={{ height: '100vh' }} 
        camera={{
          position: [-2, 1.5, 2]
        }}
      >
        <OrbitControls />
        <Performance />
        <Scene />
      </Canvas>
    </>
  )
}

const root = createRoot(document.querySelector('#app') as HTMLDivElement)
root.render(<App />)